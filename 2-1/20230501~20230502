// 그래프란?
// 그래프의 예 -> 트리, 지도ㅡ 지하철 노선도
// 그래프의 종류 -> 무방향 그래프, 방향 그래프 
// 
// 단순 걍로(simple path)
// 경로 중에서 반복되는 간선이 없는 경로
// 
// 사이클(cycle)
// 시작 정점과 종료 정점이 동일한 경로
// 
// 완전 그래프(complete graph)
// 모든 정점이 연결되어 있는 그래프
// 간선의 수 : n x (n-1)/2
// 
// edge개수가 적다면 인접 리스트, edge개수가 많다면 인접 행렬로 만든다.

// 깊이 우선 탐색 (DFS)
// stack에 저장하고 시작한다.
// 갔다 온 곳 빼고 + Stack에 들어가 있는 거 빼고 갈 수 있는 곳을 모두 stack에 넣는다. 

// BFS -> DFS와 알고리즘은 같으나 Stack 대신에 Queue를 사용함.



// 그래프 표현하기
#if 1
#include<stdio.h>
#include<stdlib.h>


#define NUM_VTX 6

struct node {
    int vtx;
    struct node* next;
};

struct node* graph[NUM_VTX];

// DFS를 위한 stack 구현
int stack_dfs[NUM_VTX];
int top = -1;

// BFS를 위한 queue 구현
int queue_bfs[NUM_VTX];
int front = 0;
int rear = 0;

void enqueue(int v) {
    if (front == (rear + 1) & NUM_VTX) return;
    queue_bfs[rear] = v;
    rear = (rear + 1) % NUM_VTX;
}
int dequeue() {
    if (front == rear) return -999;
    int res = queue_bfs[front];
    front = (front + 1) % NUM_VTX;
    return res;
}

void do_DFS(int _v) {
	// 1. stack_dfs : push, pop, checkDuplication
	// 2. visitied :  방문했는지 여부를 나타내는 1차원 배열
	int visited[NUM_VTX] = { 0, }; // 모두 다 방문하지 않았음.

	// 알고리즘
	// 
	// 시작 vertex를 stack에 넣는다.
	// 
	// 반복 -- 스택이 빌 때까지
	//   스택에서 pop ---> m
	//   m을 방문했다고 표시하고, 
	//   m을 화면에 출력
	//   for (m에 연결된 각각의 vertex에 대해서)
	//       if (stack에 없고, visited가 아니면) 
	//          ==> push
	//      
	push(_v);
	while (1) {

		int m = pop();
		if (m == -999) {
			break;
		}

		printf("%d vertex를 방문했음 \n", m);

		struct node* _cur = graph[m];
		while (_cur != 0) {
			if (visited[_cur->vtx] == 0) {
				visited[_cur->vtx] = 1;
				push(_cur->vtx);
			}
			_cur = _cur->next;
		}
	}
}

void push(int v) {
    if (top == NUM_VTX - 1) {
        return;
    }
    top++;
    stack_dfs[top] = v;
    return;
}
int pop() {
    if (top == -1) {
        return -999; /// stack이 비었음
    }
    int res = stack_dfs[top];
    top--;
    return res;
}
// stack안에 v가 이미 있으면 1,
// 아님 0을 반환
int checkDuplication(int v) {

    if (top == -1) {
        return 0;
    }

    for (int i = 0; i <= top; i++) { // stack을 다 뒤지면서 v가 있는지 검사
        if (stack_dfs[i] == v) {
            return 1;
        }

    }
    return 0;
}

// _v에서 시작하여, DFS를 시행
void do_DFS(int _v) {
    // 1. stack_dfs : push, pop, checkDuplicaition
   // 2. 방문했는지 여부를 나타내는 1차원 배열
    int visited[NUM_VTX] = { 0, }; // 모두 다 방문하지 않았음.

    //알고리즘
    // 시작 vertex를 stack에 넣는다
    // 
    // 반복 -- 스택이 빌 때까지
    //  스택에서 pop한다. --> m
    //  m을 방문했다고 표시
    //  for ( m에 연결된 각각의 vertex에 대해서)
    //      if (stack에 없고, visited가 아니면 )
    //          ==> push
    // 
    push(_v);

    while (1) {

        int m = pop();
        if (m == -999) {
            break;
        }
        visited[m] = 1;
        printf("%d vertex를 방문했음 \n", m);
        struct node* _cur = graph[m];
        while (_cur != 0) {
            if (checkDuplication(_cur->vtx) == 0 && visited[_cur->vtx] == 0) {
                push(_cur->vtx);
            }
            _cur = _cur->next;
        }
    }

}

/*
int graph[NUM_VTX][NUM_VTX];

void addEdge(int v1, int v2) {
   graph[v1][v2] = 1;
   graph[v2][v1] = 1;
   return;
}

int isThereEdge(int v1, int v2) {
   return graph[v1][v2];
}
*/

void _addEdge(int v1, int v2) { // v1 --> v2

   // v2로 가는 노드를 만든다
    struct node* _v2 = (struct node*)malloc(sizeof(struct node));
    _v2->vtx = v2;
    _v2->next = 0;

    struct node* cur = graph[v1];

    if (cur == 0) {
        graph[v1] = _v2;
        return;
    }
    else {
        while (cur->next != 0) {
            cur = cur->next;
        }
        cur->next = _v2;
        return;
    }
}

void addEdge(int v1, int v2) { // v1 --> v2, v2 --> v1

 // v1 --> v2
    _addEdge(v1, v2);
    // v2 --> v1
    _addEdge(v2, v1);
}
/*
int isThereEdge(int v1, int v2) {

   struct node* cur = graph[v1];

   while (cur != 0) {
      if (cur->vtx == v2) {
         return 1;
      }
      else {
         cur = cur->next;
      }
   }

   return 0;
}
*/



int main() {

    addEdge(0, 3); // 3 --> 0
    addEdge(0, 1);
    addEdge(0, 2);
    addEdge(1, 4);
    addEdge(2, 4);
    addEdge(2, 3);
    addEdge(3, 5);
    addEdge(4, 5);

    //printf("%d\n", isThereEdge(1, 3)); // 단번에 갈 수 있으면 edge가 있는거
    //printf("%d\n", isThereEdge(0, 3));

    do_BFS(0); // 0번 vertex부처 시작해서 DFS 시행

    //do_BFS(0); // 1번 vertex부터 시작해서 BFS 시행

    //printf("%d\n",isTherePath(1,3)); // 단번에는 가지 못하지만 갈 수 있으면 path가 있는 것

    return 0;
}
#endif
